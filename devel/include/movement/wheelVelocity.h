// Generated by gencpp from file movement/wheelVelocity.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MESSAGE_WHEELVELOCITY_H
#define MOVEMENT_MESSAGE_WHEELVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement
{
template <class ContainerAllocator>
struct wheelVelocity_
{
  typedef wheelVelocity_<ContainerAllocator> Type;

  wheelVelocity_()
    : lwheel(0.0)
    , rwheel(0.0)  {
    }
  wheelVelocity_(const ContainerAllocator& _alloc)
    : lwheel(0.0)
    , rwheel(0.0)  {
  (void)_alloc;
    }



   typedef float _lwheel_type;
  _lwheel_type lwheel;

   typedef float _rwheel_type;
  _rwheel_type rwheel;




  typedef boost::shared_ptr< ::movement::wheelVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement::wheelVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct wheelVelocity_

typedef ::movement::wheelVelocity_<std::allocator<void> > wheelVelocity;

typedef boost::shared_ptr< ::movement::wheelVelocity > wheelVelocityPtr;
typedef boost::shared_ptr< ::movement::wheelVelocity const> wheelVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement::wheelVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement::wheelVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movement

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'movement': ['/home/dtrobot/DetectRobot/src/movement/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movement::wheelVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::wheelVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::wheelVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::wheelVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::wheelVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::wheelVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement::wheelVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e22920fde66adfb9b293a1db4c491138";
  }

  static const char* value(const ::movement::wheelVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe22920fde66adfb9ULL;
  static const uint64_t static_value2 = 0xb293a1db4c491138ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement::wheelVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement/wheelVelocity";
  }

  static const char* value(const ::movement::wheelVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement::wheelVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lwheel\n\
float32 rwheel\n\
";
  }

  static const char* value(const ::movement::wheelVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement::wheelVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lwheel);
      stream.next(m.rwheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheelVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement::wheelVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement::wheelVelocity_<ContainerAllocator>& v)
  {
    s << indent << "lwheel: ";
    Printer<float>::stream(s, indent + "  ", v.lwheel);
    s << indent << "rwheel: ";
    Printer<float>::stream(s, indent + "  ", v.rwheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MESSAGE_WHEELVELOCITY_H
